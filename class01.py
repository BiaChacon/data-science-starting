# -*- coding: utf-8 -*-
"""class01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y2PGup3eVHBzxeG8sSVRFFHbgOzoYAMZ
"""

import pandas as pd
movies = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/movies.csv")
ratings = pd.read_csv("https://github.com/alura-cursos/introducao-a-data-science/blob/master/aula0/ml-latest-small/ratings.csv?raw=true")

"""# Desafio 1
Determine how many movie do not have ratings and what those films are.
"""

movie_rating_mean = ratings.groupby("movieId")["rating"].mean()
movies_mean = movies.join(movie_rating_mean, on='movieId')
movies_without_rating = movies_mean[movies_mean.rating.isna()]
total = movies_without_rating.title.count()

print("Total movies without rating:"+str(total))
print("\nList of movies without rating:")

for i in df.title:
    print(" -",i)

"""# Desafio 2
Rename the rating column for the dataframe **movies_mean** to mean_rating after joining.
"""

movies_mean = movies.join(movie_rating_mean, on="movieId")
movies_mean = movies_mean.rename(columns={'rating': 'mean_rating'})
movies_mean

"""# Desafio 3
Put the number of ratings per movie, that is, not just the average, but the total votes per movie.
"""

num_ratings = ratings.groupby('movieId').size()
num_ratings.name = 'ratings_number '
movies_mean = movies_mean.join(num_ratings,on='movieId')
movies_mean

"""# Desafio 4
Round as media (average grade column) to two decimal places.
"""

movies_mean['mean_rating'] = movies_mean['mean_rating'].round(decimals=2)
movies_mean

"""# Desafio 5
Discover the genres of the films.
"""

import numpy as np

genre_movies = movies_mean.genres.str.split(pat="|")
genre = pd.Series(np.concatenate(genre_movies)).value_counts()
genre

"""# Desafio 6
Count the number of appearances of each genre.
"""

genre

"""# Desafio 7
Plot the appearance chart for each genre.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(15,8))
generos.plot(kind='bar',title='Genres occurrence')
plt.xlabel("Genres")
plt.ylabel("Occurrence")
plt.xticks(rotation=45)