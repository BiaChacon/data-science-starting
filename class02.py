# -*- coding: utf-8 -*-
"""class02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KC6OEozpqz4qth3kdar2yzmc_MZKuAvr
"""

import pandas as pd
movies = pd.read_csv("https://raw.githubusercontent.com/BiaChacon/data-science-starting/master/datasets/ml-latest-small/movies.csv")
ratings = pd.read_csv("https://raw.githubusercontent.com/BiaChacon/data-science-starting/master/datasets/ml-latest-small/ratings.csv")
import matplotlib.pyplot as plt
import seaborn as sns

"""# Desafio 1
Rotacionar os thicks (os nomes dos generos) do gráfico de barras verdes (o último), de forma a deixar as legendas mais legíveis.
"""

sns.set_style("whitegrid")

movies_genre = movies["genres"].str.get_dummies('|').sum().sort_values(ascending=False)

plt.figure(figsize=(16,8))

sns.barplot(x=movies_genre.index,
            y=movies_genre.values,
            palette=sns.color_palette("BuGn_r", n_colors=len(movies_genre) + 4))

plt.xticks(rotation=45)

plt.show()

"""# Desafio 2
Encontar vários filmes com médias próximas e distribuições diferentes, use a função **plot_movies(n)** para plotar.
"""

def plot_movie(n):
  plt.figure(figsize=(20,10))
  movies_rating = ratings.query(f"movieId=={n}")["rating"]
  plt.subplot(1,2,1)
  movies_rating.plot(kind='hist')
  plt.subplot(1,2,2)
  movies_rating = ratings.query(f"movieId=={n}")["rating"]
  movies_rating.plot.box()
  plt.show()
  movies_genre.describe()

def plot_box_movie(a,b,c,d,e,f,g,h,i,j):
  plt.figure(figsize=(20,10))
  sns.boxplot(data = ratings.query(f"movieId in [{a},{b},{c},{d},{e},{f},{g},{h},{i},{f}]"), 
              x ="movieId", 
              y="rating")
  movies_genre.describe()

movie_rating_mean = ratings.groupby("movieId")["rating"].mean()

movies_ratings = movies.join(movie_rating_mean, on='movieId')
movies_ratings = movies_ratings.rename(columns={'rating': 'mean_rating'})

#lista de filmes com médias de avaliação proximas
movies_ratings.query("mean_rating<4").sort_values("mean_rating", ascending=False).head(10)

plot_movie(1206)

#plotbox de filmes com médias de avaliação proximas
plot_box_movie(1206,91529,109487,1278,457,593,81834,60684,8950,119145)

"""# Desafio 3
Criar o boxplot dos 10 filmes com mais votos (não é com maior média, é com mais votos!). Não apenas plot mas também analise e tente tirar conclusões.
"""

num_ratings = ratings.groupby('movieId').size()
num_ratings.name = 'ratings_number'

movies_mean = movies.join(num_ratings,on='movieId')
movies_mean.sort_values("ratings_number", ascending=False).head(10)

plot_box_movie(356,318,296,593,2571,260,480,110,589,527)

"""# Desafio 4
Configurar a visualização do boxplot gerado pelo seaborn (último boxplot plotado na aula). Configurar o tamanho e colocar o nome dos filmes nos thicks.
"""

def get_title(n):
  movie = movies.query(f"movieId=={n}")
  t = movie.title
  return t

plt.figure(figsize=(20,10))
plt.xticks(rotation=45)
box=sns.boxplot(data = ratings.query("movieId in [1,2,919,46578]"), 
              x ="movieId", 
              y="rating")

titles = get_title(1), get_title(2), get_title(919), get_title(46578)
print(titles)

box.set_xticklabels(['Toy Story', 'Jumanji', 'The Wizard of Oz', 'Little Miss Sunshine'])

"""# Desafio 5
Calcular moda, média e mediana dos filmes. Explore filmes com notas mais próximas de 0.5, 3 e 5.
"""

mm = movies.join(ratings.groupby("movieId")["rating"].mean(), on="movieId")

mm = mm.rename(columns={"rating": "rating_mean"})
filmes_com_votos = mm.join(ratings.groupby('movieId').size().rename("total"), on="movieId")

rating_mode = ratings.groupby("movieId")["rating"].agg(pd.Series.mode).rename("rating_mode")
rating_median = ratings.groupby("movieId")["rating"].median().rename("rating_median")

desc = filmes_com_votos.join(rating_mode, on="movieId")
desc = desc.join(rating_median, on="movieId")
desc.drop(['genres'], axis=1, inplace=True)
desc.head()

desc[desc.rating_mean.between(left=2.75, right=3.25)].head()

desc[desc.rating_mean.between(left=0.25, right=0.75)].head()

desc[desc.rating_mean.between(left=4.75, right=5)].head()

"""# Desafio 6
Plotar o boxplot e o histograma um do lado do outro (na mesma figura ou em figuras distintas, mas um do lado do outro).
"""

plot_movie(1206)

"""# Desafio 7
Criar um gráfico de notas médias por ano (média geral considerando todos os filmes lançados naquele ano).
"""

years = mm.title.str.extract(r'(\([\d]{4}\))')
years.columns = ['year']
movies_years = mm.join(years)
years = years.join(mm["movieId"])
years.head()

mm.head()

year_mean = movies_years.groupby("year")["rating_mean"].mean().round(2)
plt.figure(figsize=(18, 8))
year_mean.plot()
